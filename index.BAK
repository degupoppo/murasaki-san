
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="png" href="png/icon.PNG">
    <title>Test</title>
    <script src="phaser.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>


<script type="text/javascript">

// Create game

let config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    scale: {
        //autoCenter: Phaser.Scale.CENTER_HORIZONTALLY,
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

let game = new Phaser.Game(config);


// class

/***
A, behavior
    1, resting
    2, moving
    3, eating
    4, sleeping
    5, grooming
    6, working
B, dynamic_status
    lif: -working/+sleeping
    nutirition: +eating
    happy: +grooming
    exp: +working
    coin: +working
C, static_status
    strength
    dexterity
    vitality
    intelligence
    luck
***/

class Character extends Phaser.GameObjects.Sprite{
    constructor(scene, x, y){
        super(scene, x, y, "dude", "Frame");
        this.scene.add.existing(this);
        this.anims.play("normal", true);
    	this.mode = "resting";
        this.count = 0;
        this.version = 0.13;
        //static_status, TODO:get from contract
        this.strength = 2 + Math.random()* 8;
        this.dexterity = 2 + Math.random()* 8;
        this.vitality = 2 + Math.random()* 8;
        this.intelligence = 2 + Math.random()* 8;
        this.luck = 2 + Math.random()* 8;
        //dymamic_status, TODO:get from contract
        this.life = 100;        //TODO: get from static_status
        this.nutrition = 100;   //TODO: calc from static_status, last_mealing_time
        this.happy = 100;       //TODO: calc from static_status, last_grooming_time
        this.exp = 0;           //TODO: get from static_status
        this.coin = 0;          //TODO: get from static_status
    }
    resting(){
	    this.count += 1;
	    if (this.count >= 100){
            this.mode = "moving";
            this.count = 0;
        }
    }
    moving() {
        this.count += 1;
        if (this.count == 1){
            var li = ["right", "left"];
            this.dist = li[Math.floor(Math.random() * li.length)];
            if (this.dist == "right"){
                this.anims.play("murasaki_right", true);
            }else if (this.dist == "left") {
                this.anims.play("murasaki_left", true);
            }
        }else {
            if (this.dist == "right" && this.count % 2 == 0){
                this.x += 1;
            }else if (this.dist == "left" && this.count % 2 == 0) {
                this.x -= 1;
            }
            if (this.count >= 100) {
                this.mode = "rest";
                this.count = 0;
    		}
        }
    }
    //send: last_nutrition_time
    eating() {
    }
    sleeping() {
    }
    grooming() {
    }
    working() {
    }
    update(){
    	console.log(this.version, this.mode, this.count);
        if (this.mode == "resting") {this.resting();}
        else if (this.mode == "moving") {this.moving();}
        else if (this.mode == "eating") {this.eating();}
        else if (this.mode == "sleeping") {this.sleeping();}
        else if (this.mode == "grooming") {this.grooming();}
        else if (this.mode == "working") {this.working();}

        /***
    	console.log(this.version, this.mode, this.count);
        if (this.mode == "none") {
            this.mode = "rest";
        }else if (this.mode == "rest") {
		    this.count += 1;
		    if (this.count >= 100){
                var li = ["right", "left"];
                this.dist = li[Math.floor(Math.random() * li.length)];
                if (this.dist == "right"){
                    this.anims.play("murasaki_right", true);
                }else if (this.dist == "left") {
                    this.anims.play("murasaki_left", true);
                }
                this.mode = "move";
                this.count = 0;
            }
        }else if (this.mode == "move") {
            this.count += 1;
            if (this.dist == "right" && this.count % 2 == 0){
                this.x += 1;
            }else if (this.dist == "left" && this.count % 2 == 0) {
                this.x -= 1;
            }
            if (this.count >= 100) {
                this.mode = "rest";
                this.count = 0;
    		}
        }else{
            console.log("Boo!");
        }
        ***/

    }
}


// main functions

let player;

function preload() {
    this.load.image("sky", "png/sky.png");
    this.load.spritesheet("dude", "png/murasaki2.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_right", "png/murasaki_right.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_left", "png/murasaki_left.png", {frameWidth: 74, frameHeight: 64});
    cursors = this.input.keyboard.createCursorKeys();
}


function create() {

    this.add.image(400, 300, "sky");
    //player = this.physics.add.sprite(100,450, "dude");
    //player = this.add.sprite(100,450, "dude");

    this.anims.create({
        key: "normal",
        frames: this.anims.generateFrameNumbers("dude", {start: 0, end:3}),
        frameRate: 2,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_right",
        frames: this.anims.generateFrameNumbers("murasaki_right", {start: 0, end:3}),
        frameRate: 2,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_left",
        frames: this.anims.generateFrameNumbers("murasaki_left", {start: 0, end:3}),
        frameRate: 2,
        repeat: -1
    });

    //player.anims.play("normal", true);

    //var group = this.add.group();
    char1 = new Character(this, 300 + Math.random()*200, 400 + Math.random()*100);

}


function update() {
    //player.x += 1;
    //if (cursors.right.isDown) {
    //    var random = Math.random() * 600;
        //player = this.physics.add.sprite(random,450, "dude");
    //    player = this.add.sprite(random,450, "dude");
    //    player.anims.play("normal", true);
    //};
    //if (cursors.left.isDown) {
    //    player.anims.play("normal", false);
    //};
    //if (cursors.down.isDown) {
        //chara = this.scene.add.existing(new Chara(this, 100,100));
    //    chara = new Character(this, Math.random()*400,Math.random()*400);
    //    chara.anims.play("normal", true);
    //}
    char1.update();
}

</script>


</body>
</html>
