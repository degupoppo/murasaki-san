
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="png" href="png/icon.PNG">
    <title>Test</title>
    <script src="phaser.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<br>
<center>

<script type="text/javascript">

/***
Idea
    working()の概念を考える
        コインを稼ぐ
        str依存？動作とステータスのイメージが一致するように
        マイニング？お花摘み？
    クラフト, luck, str, dexなどのステータス＋クラフト時間で成功率を変える、アイテムごとに難易度が違う
        難しいものでも、１ヶ月とかクラフトし続ければ作れるかもしれない。
        連続思考を防ぐため、０％も作る。またファンブルで必ず５％は失敗する
        クラフト品のユースケースは？
    資産
        exp?, 時間, コイン（sota?, ohana?), 素材(あまり種類を多くしない, 低級、中級、上級、ぐらい）
        expはお世話で取得
        コインはminingで取得
        素材はfarmingで取得
    効率・補正
        Lv, Str/Dex/Intなどのステータス, endを押すまでの経過時間
        クラフト品による補正
    時間を資源に
        フリー時間しかgroomingなどできない
        working, やcraftingは時間を費やせばそれだけ効率や成功率が増大する
        しかしworkingさせているとgroomingやfeedingできずにexpがたまらない
    ステータス
        Lvアップで増加？ランダム？
        木の実をクラフトし使用する、確率を小さくするか、高価にする
    お世話, expを得る
        feeding, デイリークエスト, コストなし, 24時間で最大効率
        grooming, プラスアルファ, 何かしらのコスト必要, 168時間で最大効率
ToDo
    絵を大きめにする
    Lvを実装する。必要expの対応表を作製する。
    satietyとhappyの差別化を考える。
    ok つっつき動作の実装
    ok fake contractにfeeding(), grooming(), lv_up()を実装する
    ok ボタンの実装、表示、押したときの動作
    ok eating実装
    ok grooming実装
    ok コントラを見立てた外部ステータス格納区域の実装と、読み込み、書き込みの実装
    ok キャラのステータスをテキストで描写, コントラから定期的に取得し計算する
    ok ステータスはキャラクラスに保持させずに、コントラに見立てた外部変数に格納する。
    ok 1日1回？feeding, last_feeding_timeからの差でexp加算, 24hr以上の差は無効
    ok satiety, happy, expのバーを実装する
***/


const version = "0.0.14";
let turn = 0;


//static_status, read from construct at once
let local_id;
let local_type;
let local_strength;
let local_dexterity;
let local_vitality;
let local_intelligence;
let local_luck;
let local_birth_time;
//dynamic_status, read from construct continuously, write to construct
let local_level = 1;
let local_last_feeding_time = Date.now() + 864000;
let local_last_grooming_time = Date.now() + 864000;
let local_coin;
let local_working_status;
let local_working_start_time;
let local_exp;
let local_mining_status;
let local_mining_start_time;


//fake contract
class Contract {
    constructor() {
        //NFT parameters
        this.id = "001";
        this.type = Math.trunc(Math.random() * 5);
        this.strength = 2 + Math.trunc(Math.random() * 8);
        this.dexterity = 2 + Math.trunc(Math.random() * 8);
        this.vitality = 2 + Math.trunc(Math.random() * 8);
        this.intelligence = 2 + Math.trunc(Math.random() * 8);
        this.luck = 2 + Math.trunc(Math.random() * 8);
        this.birth_time = Date.now();
        this.last_feeding_time = Date.now();
        this.last_grooming_time = Date.now();
        this.coin = 100;
        this.working_status = 0;
        this.working_start_time = 0;
        this.mining_status = 0;
        this.mining_start_time = 0;
        this.farming_status = 0;
        this.farming_start_time = 0;
        this.exp = 0;
        this.level = 1;
        //contract parameters
        this.next_summoners = 0;
    }
    grooming() {
        let delta = (Date.now() - this.last_grooming_time) / 1000;
        this.last_grooming_time = Date.now();
        this.exp += delta;
    }
    feeding() {
        let delta = (Date.now() - this.last_feeding_time) / 1000;
        this.last_feeding_time = Date.now();
        this.exp += delta;
    }
    start_crafting(item_id) {
    }
    end_crafting(item) {
    }
    start_mining() {
        if (this.mining_status == 0){
            this.mining_start_time = Date.now();
            this.mining_status = 1;
        }
    }
    end_mining() {
        if (this.mining_status == 1) {
            let delta = (Date.now() - this.mining_start_time) / 1000;
            this.coin += delta;
            this.mining_status = 0;
        }
    }
    start_farming() {
    }
    end_farming() {
    }
    level_up() {
        if (this.exp >= 1000) {
            this.exp -= 1000;
            this.level += 1;
            var tmp = Math.trunc(Math.random() * 5);
            if (tmp == 0) {
                this.strength += 1;
            }else if (tmp == 1) {
                this.dexterity += 1;
            }else if (tmp == 2) {
                this.vitality += 1;
            }else if (tmp == 3) {
                this.intelligence += 1;
            }else {
                this.luck += 1;
            }
        }
    }
}


class Character extends Phaser.GameObjects.Sprite{
    constructor(scene, x, y){
        super(scene, x, y, "murasaki_right");
        this.scene.add.existing(this);
        this.anims.play("murasaki_right", true);
    	this.mode = "resting";
        this.count = 0;
        this.dist = "right";
        this.setInteractive()
        this.on("pointerdown", function (pointer) {
            this.on_click();
        }, this);
    }
    set set_mode(mode){
        this.mode = mode;
        this.count = 0;
    }
    get get_mode(){
        return this.mode;
    }
    on_click() {
        if (this.mode != "mining") {
            this.count = 0;
            this.mode = "hugging";
        }
    }
    resting(){
	    this.count += 1;
        if (this.count == 1) {
            if (this.dist == "right"){
                this.anims.play("murasaki_right", true);
            }else if (this.dist == "left") {
                this.anims.play("murasaki_left", true);
            }
	    }else if (this.count >= 100){
            let tmp = Math.random() * 100;
            let base = 864000;
            let now_time = Date.now();
            let happy = Math.round( (base - (now_time - local_last_grooming_time)) / base * 1000 ) / 10;
            if (tmp <= 10) {
                this.mode = "sleeping";
                this.count = 0;
            }else if (tmp <= 20 & happy <= 10) {
                this.mode = "crying";
                this.count = 0;
            }else {
                this.mode = "moving";
                this.count = 0;
            }
        }
    }
    moving() {
        this.count += 1;
        if (this.count == 1){
            if (this.x <= 100) {
                this.dist = "right";
            }else if (this.x >= 700) {
                this.dist = "left";
            }else {
                var li = ["right", "left"];
                this.dist = li[Math.floor(Math.random() * li.length)];
            }
            if (this.dist == "right"){
                this.anims.play("murasaki_right", true);
            }else if (this.dist == "left") {
                this.anims.play("murasaki_left", true);
            }
        }else if (this.count < 100) {
            if (this.dist == "right" && this.count % 2 == 0){
                this.x += 1;
            }else if (this.dist == "left" && this.count % 2 == 0) {
                this.x -= 1;
            }
        }else if (this.count >= 100) {
            this.mode = "resting";
            this.count = 0;
        }
    }
    //send: last_nutrition_time
    feeding() {
        this.count += 1;
        if (this.count == 1){
            this.anims.play("murasaki_feeding", true);
        }else if (this.count >= 1000) {
            this.mode = "resting";
            this.count = 0;
        }
    }
    crying() {
        this.count += 1;
        if (this.count == 1){
            this.anims.play("murasaki_crying", true);
        }else if (this.count >= 500) {
            this.mode = "resting";
            this.count = 0;
        }
    }
    sleeping() {
        this.count += 1;
        if (this.count == 1){
            this.anims.play("murasaki_sleeping", true);
        }else if (this.count >= 1000) {
            this.mode = "resting";
            this.count = 0;
        }
    }
    //send: last_grooming_time
    grooming() {
        this.count += 1;
        if (this.count == 1){
            this.anims.play("murasaki_feeding", true);
        }else if (this.count >= 1000) {
            this.mode = "resting";
            this.count = 0;
        }
    }
    //cost: life, gain: coin
    working() {
        this.count += 1;
    }
    mining() {
        this.count += 1;
        if (this.count == 1){
            this.anims.play("murasaki_mining", true);
        }
    }
    hugging() {
        this.count += 1;
        if (this.count == 1){
            this.anims.play("murasaki_hugging", true);
        }else if (this.count >= 250) {
            this.mode = "resting";
            this.count = 0;
        }
    }
    update(){
        //console.log(this.version, this.mode, this.count);
        if (this.mode == "resting") {this.resting();}
        else if (this.mode == "moving") {this.moving();}
        else if (this.mode == "feeding") {this.feeding();}
        else if (this.mode == "crying") {this.crying();}
        else if (this.mode == "sleeping") {this.sleeping();}
        else if (this.mode == "grooming") {this.grooming();}
        else if (this.mode == "working") {this.working();}
        else if (this.mode == "mining") {this.mining();}
        else if (this.mode == "hugging") {this.hugging();}
    }
}


class Button {
    constructor(x, y, label, scene, callback) {
        let fontsize = 12;
        const button = scene.add.text(x, y, label)
            .setFontSize(fontsize)
            .setFontFamily("Arial")
            .setOrigin(0.5)
            .setPadding(10)
            //.setStyle({ backgroundColor: '#111' })
            .setInteractive({ useHandCursor: true })
            .on('pointerdown', () => callback())
            .on('pointerover', () => button.setStyle({ fontSize: fontsize, fontFamily: "Arial", fill: '#f39c12' }))
            .on('pointerout', () => button.setStyle({ fontSize: fontsize, fontFamily: "Arial", fill: '#FFF' }));
    }
}


//button
//TODO: send transaction
function makeBar(scene, x, y, color) {
    //draw the bar
    let bar = scene.add.graphics();
    //color the bar
    bar.fillStyle(color, 1);
    //fill the bar with a rectangle
    bar.fillRect(0, 0, 100, 10);
    //position the bar
    bar.x = x;
    bar.y = y;
    //return the bar
    return bar;
}
function button_feeding(contract) {
    contract.feeding();
}
function button_grooming(contract) {
    contract.grooming();
}
function button_start_mining(contract) {
    contract.start_mining();
}
function button_end_mining(contract) {
    contract.end_mining();
}
function button_level_up(contract) {
    contract.level_up();
}


// main functions


let config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    scale: {
        mode: Phaser.Scale.FIT,
        //autoCenter: Phaser.Scale.CENTER_BOTH
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    },
};
let game = new Phaser.Game(config);


function preload() {
    //this.load.image("sky", "png/sky.png");
    this.load.image("back", "png/back.jpg");
    this.load.spritesheet("murasaki_right", "png/murasaki_right.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_left", "png/murasaki_left.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_sleeping", "png/murasaki_sleeping.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_feeding", "png/murasaki_feeding.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_crying", "png/murasaki_crying.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_mining", "png/murasaki_mining.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_hugging", "png/murasaki_hugging.png", {frameWidth: 74, frameHeight: 64});
    cursors = this.input.keyboard.createCursorKeys();
}


function create() {
    //fake contract
    contract = new Contract();
    this.add.image(400, 300, "back");
    this.anims.create({
        key: "murasaki_right",
        frames: this.anims.generateFrameNumbers("murasaki_right", {start: 0, end:3}),
        frameRate: 2,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_left",
        frames: this.anims.generateFrameNumbers("murasaki_left", {start: 0, end:3}),
        frameRate: 2,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_sleeping",
        frames: this.anims.generateFrameNumbers("murasaki_sleeping", {start: 0, end:1}),
        frameRate: 1,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_feeding",
        frames: this.anims.generateFrameNumbers("murasaki_feeding", {start: 0, end:1}),
        frameRate: 1,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_crying",
        frames: this.anims.generateFrameNumbers("murasaki_crying", {start: 0, end:1}),
        frameRate: 1,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_mining",
        frames: this.anims.generateFrameNumbers("murasaki_mining", {start: 0, end:1}),
        frameRate: 1,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_hugging",
        frames: this.anims.generateFrameNumbers("murasaki_hugging", {start: 0, end:1}),
        frameRate: 1,
        repeat: -1
    });
    //summon character
    char1 = new Character(this, 300 + Math.random()*200, 400 + Math.random()*100);
    //button
    const button1 = new Button(50, 20, 'Feeding', this, () => button_feeding(contract));
    const button2 = new Button(50, 40, 'Grooming', this, () => button_grooming(contract));
    const button3 = new Button(50, 60, 'Start Mining', this, () => button_start_mining(contract));
    const button4 = new Button(50, 80, 'End Mining', this, () => button_end_mining(contract));
    const button5 = new Button(50, 100, 'Level Up', this, () => button_level_up(contract));
    //text
    text_version = this.add.text(600, 10, "version = " + version, {font: "10.5px Arial", fill: "#000"});
    //static_status
    text_id = this.add.text(
        600, 30, "id = " + local_id, {font: "10.5px Arial", fill: "#000"});
    text_type = this.add.text(
        600, 40, "type = " + local_type, {font: "10.5px Arial", fill: "#000"});
    text_birth_time = this.add.text(
        600, 50, "birth_time = " + local_birth_time, {font: "10.5px Arial", fill: "#000"});
    text_strength = this.add.text(
        600, 60, "strength = " + local_strength, {font: "10.5px Arial", fill: "#000"});
    text_dexterity = this.add.text(
        600, 70, "dexterity = " + local_dexterity, {font: "10.5px Arial", fill: "#000"});
    text_vitality = this.add.text(
        600, 80, "vitality = " + local_vitality, {font: "10.5px Arial", fill: "#000"});
    text_intelligence = this.add.text(
        600, 90, "intelligence = " + local_intelligence, {font: "10.5px Arial", fill: "#000"});
    text_luck = this.add.text(
        600, 100, "luck = " + local_luck, {font: "10.5px Arial", fill: "#000"});
    //dynamic_status
    text_level = this.add.text(
        600, 120, "level = " + local_level, {font: "10.5px Arial", fill: "#000"});
    text_last_feeding_time = this.add.text(
        600, 130, "last_feeding_time = " + local_last_feeding_time, {font: "10.5px Arial", fill: "#000"});
    text_last_grooming_time = this.add.text(
        600, 140, "last_grooming_time = " + local_last_grooming_time, {font: "10.5px Arial", fill: "#000"});
    text_coin = this.add.text(
        600, 150, "coin = " + local_coin, {font: "10.5px Arial", fill: "#000"});
    text_working_status = this.add.text(
        600, 160, "working_status = " + local_working_status, {font: "10.5px Arial", fill: "#000"});
    text_working_start_time = this.add.text(
        600, 170, "working_start_time = " + local_working_start_time, {font: "10.5px Arial", fill: "#000"});
    text_exp = this.add.text(
        600, 180, "exp = " + local_exp, {font: "10.5px Arial", fill: "#000"});
    //calculation_status
    text_turn = this.add.text(
        600, 200, "turn = ", {font: "10.5px Arial", fill: "#000"});
    text_age_time = this.add.text(
        600, 210, "age_time = ", {font: "10.5px Arial", fill: "#000"});
    text_mode = this.add.text(
        600, 220, "mode = ", {font: "10.5px Arial", fill: "#000"});
    text_satiety = this.add.text(
        600, 230, "satiey = ", {font: "10.5px Arial", fill: "#000"});
    text_happy = this.add.text(
        600, 240, "happy = ", {font: "10.5px Arial", fill: "#000"});
    //bar
    //satiety
    this.add.text(600, 260, "satiety:", {font: "10.5px Arial", fill: "#000"});
    bar_satiety_back = makeBar(this, 640, 260, 0xa9a9a9);
    bar_satiety_back.scaleX = 1;
    bar_satiety = makeBar(this, 640, 260, 0xff4500);
    bar_satiety.scaleX = 0;
    //happy
    this.add.text(600, 280, "happy:", {font: "10.5px Arial", fill: "#000"});
    bar_happy_back = makeBar(this, 640, 280, 0xa9a9a9);
    bar_happy_back.scaleX = 1;
    bar_happy = makeBar(this, 640, 280, 0x4169e1);
    bar_happy.scaleX = 0;
    //exp
    this.add.text(600, 300, "exp:", {font: "10.5px Arial", fill: "#000"});
    bar_exp_back = makeBar(this, 640, 300, 0xa9a9a9);
    bar_exp_back.scaleX = 1;
    bar_exp = makeBar(this, 640, 300, 0x228b22);
    bar_exp.scaleX = 0;
    //coin
    text_coin_main = this.add.text(
        600, 320, "coin:" + local_coin, {font: "10.5px Arial", fill: "#ffd700"});
}


function update() {
    //update turn
    turn += 1;
    text_turn.setText("turn = " + turn);
    //update character
    char1.update();
    //update static status from contract at once
    if (turn == 1 || turn % 1001 == 0) {
        local_id = contract.id;
        local_type = contract.type;
        local_birth_time = contract.birth_time;
        local_strength = contract.strength;
        local_dexterity = contract.dexterity;
        local_vitality = contract.vitality;
        local_intelligence = contract.intelligence;
        local_luck = contract.luck;
        text_id.setText("id = " + local_id);
        text_type.setText("type = " + local_type);
        text_birth_time.setText("birth_time = " + local_birth_time);
        text_strength.setText("strength = " + local_strength);
        text_dexterity.setText("dexterity = " + local_dexterity);
        text_vitality.setText("vitality = " + local_vitality);
        text_intelligence.setText("intelligence = " + local_intelligence);
        text_luck.setText("luck = " + local_luck);
    }
    //update calculation status
    if (turn == 1 || turn % 10 == 0) {
        //update calculation_status
        let now_time = Date.now();
        let age_time = Math.round( (now_time - local_birth_time) / 1000 );
        let mode = char1.get_mode;
        //var base = 86400000
        let base = 864000
        let satiety = Math.round( (base - (now_time - local_last_feeding_time)) / base * 1000 ) / 10;
        if (satiety < 0) { satiety = 0; }
        if (satiety > 100) { satiety = 100; }
        let happy = Math.round( (base - (now_time - local_last_grooming_time)) / base * 1000 ) / 10;
        if (happy < 0) { happy = 0; }
        if (happy > 100) { happy = 100; }
        //update text
        text_level.setText("level = " + local_level);
        text_last_feeding_time.setText("last_feeding_time = " + local_last_feeding_time);
        text_last_grooming_time.setText("last_grooming_time = " + local_last_grooming_time);
        text_coin.setText("coin = " + local_coin);
        text_working_status.setText("working_status = " + local_working_status);
        text_working_start_time.setText("working_start_time = " + local_working_start_time);
        text_exp.setText("exp = " + local_exp);
        text_age_time.setText("age_time = " + age_time);
        text_mode.setText("mode = " + mode);
        text_satiety.setText("satiety = " + satiety);
        text_happy.setText("happy = " + happy);
        //update bar
        bar_satiety.scaleX = satiety / 100;
        bar_happy.scaleX = happy / 100;
        let exp = (local_exp / 1000) * 100;
        if (exp > 100) { exp = 100; }
        bar_exp.scaleX = exp / 100;
        text_coin_main.setText("coin: " + local_coin);
    }
    //update dynamic status from contract to local
    if (turn == 1 || turn % 101 == 0) {
        //update statistic_status
        //update dynamic_status
        //TODO: read from contract
        local_level = contract.level;
        let previous_local_last_feeding_time = local_last_feeding_time;
        let previous_local_last_grooming_time = local_last_grooming_time;
        local_last_feeding_time = contract.last_feeding_time;
        local_last_grooming_time = contract.last_grooming_time;
        local_coin = contract.coin;
        local_working_status = contract.working_status;
        local_working_start_time = contract.working_start_time;
        local_mining_status = contract.mining_status;
        local_exp = contract.exp;
        //check character mode
        if (local_last_feeding_time > previous_local_last_feeding_time){
            char1.set_mode = "feeding";
        }
        if (local_last_grooming_time > previous_local_last_grooming_time){
            char1.set_mode = "grooming";
        }
        if (local_mining_status == 1 & char1.mode != "mining"){
            char1.set_mode = "mining";
        }else if (local_mining_status == 0 & char1.mode == "mining") {
            char1.set_mode = "resting";
        }
    }
}


</script>

</center>

</body>
</html>
