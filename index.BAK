
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="png" href="png/icon.PNG">
    <title>Test</title>
    <script src="phaser.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>


<script type="text/javascript">

/***
ToDo
    ボタンの実装、表示、押したときの動作
    eating実装
    grooming実装
    コントラを見立てた外部ステータス格納区域の実装と、読み込み、書き込みの実装

***/


// class

/***
A, behavior
    1, resting
    2, moving
    3, eating
    4, sleeping
    5, grooming
    6, working
B, dynamic_status
    lif: -working/+sleeping
    nutirition: +eating
    happy: +grooming
    exp: +working
    coin: +working
C, static_status
    strength
    dexterity
    vitality
    intelligence
    luck
***/

class Character extends Phaser.GameObjects.Sprite{
    constructor(scene, x, y){
        super(scene, x, y, "murasaki_right", "Frame");
        this.scene.add.existing(this);
        this.anims.play("normal", true);
    	this.mode = "resting";
        this.count = 0;
        this.version = 0.13;
        //static_status, TODO:get from contract
        this.strength = 2 + Math.random()* 8;
        this.dexterity = 2 + Math.random()* 8;
        this.vitality = 2 + Math.random()* 8;
        this.intelligence = 2 + Math.random()* 8;
        this.luck = 2 + Math.random()* 8;
        //dymamic_status, TODO:get from contract
        this.life = 100;        //TODO: get from static_status
        this.nutrition = 100;   //TODO: calc from static_status, last_mealing_time
        this.happy = 100;       //TODO: calc from static_status, last_grooming_time
        this.exp = 0;           //TODO: get from static_status
        this.coin = 0;          //TODO: get from static_status
    }
    resting(){
	    this.count += 1;
	    if (this.count >= 100){
            this.mode = "moving";
            this.count = 0;
        }
    }
    moving() {
        this.count += 1;
        if (this.count == 1){
            if (this.x <= 100) {
                this.dist = "right";
            }else if (this.x >= 700) {
                this.dist = "left";
            }else {
                var li = ["right", "left"];
                this.dist = li[Math.floor(Math.random() * li.length)];
            }
            if (this.dist == "right"){
                this.anims.play("murasaki_right", true);
            }else if (this.dist == "left") {
                this.anims.play("murasaki_left", true);
            }
        }else if (this.count < 100) {
            if (this.dist == "right" && this.count % 2 == 0){
                this.x += 1;
            }else if (this.dist == "left" && this.count % 2 == 0) {
                this.x -= 1;
            }
        }else if (this.count >= 100) {
            this.mode = "resting";
            this.count = 0;
        }
    }
    //send: last_nutrition_time
    eating() {
        this.count += 1;
    }
    sleeping() {
        this.count += 1;
    }
    //send: last_grooming_time
    grooming() {
        this.count += 1;
    }
    //cost: life, gain: coin
    working() {
        this.count += 1;
    }
    update(){
        //console.log(this.version, this.mode, this.count);
        if (this.mode == "resting") {this.resting();}
        else if (this.mode == "moving") {this.moving();}
        else if (this.mode == "eating") {this.eating();}
        else if (this.mode == "sleeping") {this.sleeping();}
        else if (this.mode == "grooming") {this.grooming();}
        else if (this.mode == "working") {this.working();}
    }
}

/***
//ボタンクラス
//https://ysko909.github.io/posts/make-button-class-with-phaserjs/
class OriginalButtonClass extends Phaser.GameObjects.Container{
  
  //text: Phaser.GameObjects.Text;
  //container: Phaser.GameObjects.Rectangle;
  
  constructor (scene: Phaser.Scene, x:number, y:number, text:string, props: Props){
    super(scene, x, y);
    
    // 入力されたオブジェクトから各要素を取り出す
    const{
      width = 90,
      height = 40, 
      onClick,
      align = 'center', 
      fontSize = 30, 
      color = 'black'
    } = props;
    
    // シーンにボタンを追加
    this.scene = scene;
    this.scene.add.existing(this);
    
    this.setSize(width, height);
    this.setInteractive({useHandCursor: true});
    
    const alignLeft = align === 'left';
    
    // 左寄せの場合は位置を調整
    this.text = scene.add.text(alignLeft ? -width / 2 + 0 : 0, -1, text, {align, fontSize, color}).setOrigin(alignLeft ? 0:0.5, 0.5).setPadding(0, 2, 0, 0);
    this.text.setColor(color);
    
    // ボタンの枠を作成
    this.container = scene.add.rectangle(0, 0, width, height);
    this.container.setStrokeStyle(1, 0xffffff).setOrigin(alignLeft ? 0 : 0.5, 0.5);
    
    this.add([this.container, this.text])
    this.on('pointerover', () => {
      this.updateButton('pointer over', 'red');
    });
    
    this.on('pointerout', () => {
      this.updateButton('pointer out', color);
    });
    
    this.on('pointerdown', ()=>{
      this.updateButton('pointer down', 'blue');
      this.scene.tweens.add({
        targets: this,
        scaleX: 1.1,
        scaleY: 1.1,
        duration: 100,
        yoyo: true,
        repeat: 2,
        ease: 'Sine.easeInOut',
      });
    });
    
    this.on('pointerup', () => {
      this.updateButton('pointer up','yellow');
      onClick();
    });
    
  }
  
  updateButton =(message: string, color: string)=>{
    console.log(message);
    this.text.setColor(color);
  }

}
***/



// main functions


let config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    scale: {
        //autoCenter: Phaser.Scale.CENTER_HORIZONTALLY,
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};


let game = new Phaser.Game(config);


function preload() {
    this.load.image("sky", "png/sky.png");
    this.load.spritesheet("murasaki_right", "png/murasaki_right.png", {frameWidth: 74, frameHeight: 64});
    this.load.spritesheet("murasaki_left", "png/murasaki_left.png", {frameWidth: 74, frameHeight: 64});
    cursors = this.input.keyboard.createCursorKeys();
}


function create() {
    this.add.image(400, 300, "sky");
    this.anims.create({
        key: "murasaki_right",
        frames: this.anims.generateFrameNumbers("murasaki_right", {start: 0, end:3}),
        frameRate: 2,
        repeat: -1
    });
    this.anims.create({
        key: "murasaki_left",
        frames: this.anims.generateFrameNumbers("murasaki_left", {start: 0, end:3}),
        frameRate: 2,
        repeat: -1
    });
    //var group = this.add.group();
    char1 = new Character(this, 300 + Math.random()*200, 400 + Math.random()*100);

    /***
    this.button = new OriginalButtonClass(this, 200, 200, 'hoge', {
        onClick: ()=>{
            console.log('clicked.');
        }
    });
    ***/

}


function update() {
    char1.update();
    if (cursors.right.isDown) {
        char1.update();
    }
}


</script>


</body>
</html>
